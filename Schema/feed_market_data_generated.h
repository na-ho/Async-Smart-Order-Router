// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FEEDMARKETDATA_MSGSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_FEEDMARKETDATA_MSGSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace MsgSerialization {

struct Feed_Market_Data;
struct Feed_Market_DataBuilder;

struct Feed_Market_Data_Entity;
struct Feed_Market_Data_EntityBuilder;

struct Feed_Market_Data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Feed_Market_DataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MARKET_VENUE_ID = 4,
    VT_SYMBOL = 6,
    VT_SELL = 8,
    VT_BUY = 10
  };
  int32_t market_venue_id() const {
    return GetField<int32_t>(VT_MARKET_VENUE_ID, 0);
  }
  const flatbuffers::String *symbol() const {
    return GetPointer<const flatbuffers::String *>(VT_SYMBOL);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>> *sell() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>> *>(VT_SELL);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>> *buy() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>> *>(VT_BUY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MARKET_VENUE_ID) &&
           VerifyOffset(verifier, VT_SYMBOL) &&
           verifier.VerifyString(symbol()) &&
           VerifyOffset(verifier, VT_SELL) &&
           verifier.VerifyVector(sell()) &&
           verifier.VerifyVectorOfTables(sell()) &&
           VerifyOffset(verifier, VT_BUY) &&
           verifier.VerifyVector(buy()) &&
           verifier.VerifyVectorOfTables(buy()) &&
           verifier.EndTable();
  }
};

struct Feed_Market_DataBuilder {
  typedef Feed_Market_Data Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_market_venue_id(int32_t market_venue_id) {
    fbb_.AddElement<int32_t>(Feed_Market_Data::VT_MARKET_VENUE_ID, market_venue_id, 0);
  }
  void add_symbol(flatbuffers::Offset<flatbuffers::String> symbol) {
    fbb_.AddOffset(Feed_Market_Data::VT_SYMBOL, symbol);
  }
  void add_sell(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>>> sell) {
    fbb_.AddOffset(Feed_Market_Data::VT_SELL, sell);
  }
  void add_buy(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>>> buy) {
    fbb_.AddOffset(Feed_Market_Data::VT_BUY, buy);
  }
  explicit Feed_Market_DataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Feed_Market_Data> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Feed_Market_Data>(end);
    return o;
  }
};

inline flatbuffers::Offset<Feed_Market_Data> CreateFeed_Market_Data(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t market_venue_id = 0,
    flatbuffers::Offset<flatbuffers::String> symbol = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>>> sell = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>>> buy = 0) {
  Feed_Market_DataBuilder builder_(_fbb);
  builder_.add_buy(buy);
  builder_.add_sell(sell);
  builder_.add_symbol(symbol);
  builder_.add_market_venue_id(market_venue_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Feed_Market_Data> CreateFeed_Market_DataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t market_venue_id = 0,
    const char *symbol = nullptr,
    const std::vector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>> *sell = nullptr,
    const std::vector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>> *buy = nullptr) {
  auto symbol__ = symbol ? _fbb.CreateString(symbol) : 0;
  auto sell__ = sell ? _fbb.CreateVector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>>(*sell) : 0;
  auto buy__ = buy ? _fbb.CreateVector<flatbuffers::Offset<MsgSerialization::Feed_Market_Data_Entity>>(*buy) : 0;
  return MsgSerialization::CreateFeed_Market_Data(
      _fbb,
      market_venue_id,
      symbol__,
      sell__,
      buy__);
}

struct Feed_Market_Data_Entity FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Feed_Market_Data_EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRICE = 4,
    VT_QTY = 6
  };
  float price() const {
    return GetField<float>(VT_PRICE, 0.0f);
  }
  float qty() const {
    return GetField<float>(VT_QTY, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_PRICE) &&
           VerifyField<float>(verifier, VT_QTY) &&
           verifier.EndTable();
  }
};

struct Feed_Market_Data_EntityBuilder {
  typedef Feed_Market_Data_Entity Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_price(float price) {
    fbb_.AddElement<float>(Feed_Market_Data_Entity::VT_PRICE, price, 0.0f);
  }
  void add_qty(float qty) {
    fbb_.AddElement<float>(Feed_Market_Data_Entity::VT_QTY, qty, 0.0f);
  }
  explicit Feed_Market_Data_EntityBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Feed_Market_Data_Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Feed_Market_Data_Entity>(end);
    return o;
  }
};

inline flatbuffers::Offset<Feed_Market_Data_Entity> CreateFeed_Market_Data_Entity(
    flatbuffers::FlatBufferBuilder &_fbb,
    float price = 0.0f,
    float qty = 0.0f) {
  Feed_Market_Data_EntityBuilder builder_(_fbb);
  builder_.add_qty(qty);
  builder_.add_price(price);
  return builder_.Finish();
}

inline const MsgSerialization::Feed_Market_Data *GetFeed_Market_Data(const void *buf) {
  return flatbuffers::GetRoot<MsgSerialization::Feed_Market_Data>(buf);
}

inline const MsgSerialization::Feed_Market_Data *GetSizePrefixedFeed_Market_Data(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MsgSerialization::Feed_Market_Data>(buf);
}

inline bool VerifyFeed_Market_DataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MsgSerialization::Feed_Market_Data>(nullptr);
}

inline bool VerifySizePrefixedFeed_Market_DataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MsgSerialization::Feed_Market_Data>(nullptr);
}

inline void FinishFeed_Market_DataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MsgSerialization::Feed_Market_Data> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFeed_Market_DataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MsgSerialization::Feed_Market_Data> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MsgSerialization

#endif  // FLATBUFFERS_GENERATED_FEEDMARKETDATA_MSGSERIALIZATION_H_
